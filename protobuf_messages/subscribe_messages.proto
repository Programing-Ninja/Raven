syntax="proto3";
package protobuf_messages;

enum SubscribeFilter
{
    SubscribeFilterZero = 0x0; // unused, exists only due to protobuf reasons
    LatestGroup = 0x1;         // Specifies an open-ended subscription with objects from the beginning of the current group.
    LatestObject = 0x2;        // Specifies an open-ended subscription beginning from the current object of the current group.
    AbsoluteStart = 0x3;       // Specifies an open-ended subscription beginning from the object identified in the StartGroup and StartObject fields.
    AbsoluteRange = 0x4;       // Specifies a closed subscription starting at StartObject in StartGroup and ending at EndObject in EndGroup. 
                               // The start and end of the range are inclusive. EndGroup and EndObject MUST specify the same or a later object than StartGroup and StartObject.
};

enum ObjectStatus
{
    Normal      = 0x0;
    ObjectDNE   = 0x1; // Indicates that this object does not exist at any publisher 
                       // and it will not be published in the future.

    GrpDNE      = 0x2; // Indicates Group does not exist. Indicates that objects with this GroupID do not exist at 
                       // any publisher and they will not be published in the future.
                     
    EndOfGroup  = 0x3; // Indicates Group does not exist. Indicates that objects with this GroupID 
                       // do not exist at any publisher and they will not be published in the future.

    EndOfTrack  = 0x4; // Indicates end of Track and Group. GroupID is one greater than the largest group produced in this track 
                       // and the ObjectId is one greater than the largest object produced in that group. 
                       // This is sent right after the last object in the track. 
};

message SubscribeParameter
{};


message SubscribeMessage
{
    uint64 SubscribeID = 1;
    uint64 TrackAlias = 2;
    string TrackNamespace = 3;
    string TrackName = 4;
    uint32 SubscriberPriority = 5; // should be 8 bits
    uint32 GroupOrder = 6; // should be 8 bits
    SubscribeFilter FilterType = 7;
    optional uint64 StartGroup = 8;
    optional uint64 StartObject = 9;
    optional uint64 EndGroup = 10;
    optional uint64 EndObject = 11;
    uint64 NumParameters = 12;
    repeated SubscribeParameter parameters = 13;
};


message SubscribeUpdateMessage {
  uint64 SubscribeId = 1;
  uint64 StartGroup = 2;
  uint64 StartObject = 3;
  uint64 EndGroup = 4;
  uint64 EndObject = 5;
  uint32 SubscriberPriority = 6; // should be 8 bit
  uint64 numParameters = 7;
  repeated SubscribeParameter parameters = 8;
};

message UnSubscribeMessage {
  uint64 SubscribeId = 1;
};

message SubscribeOkMessage
{
  uint64 SubscribeId = 1;
  uint64 Expires = 2;
  uint32 GroupOrder = 3; // should be 8bit
  bool ContentExists = 4;
  optional uint64 LargestGroupId = 5;
  optional uint64 LargestObjectId = 6;
};

message SubscribeErrorMessage
{
  uint64 SubscribeId = 1;
  uint64 ErrorCode = 2;
  string ReasonPhrase = 3;
  uint64 TrackAlias = 4;
};

message SubscribeDoneMessage {
  uint64 SubscribeId = 1;
  uint64 StatusCode = 2;
  string ReasonPhrase = 3;
  bool ContentExists = 4;
  optional uint64 FinalGroup = 5;
  optional uint64 FinalObject = 6;
}

